{
	"info": {
		"_postman_id": "ef35203d-3e0d-46dd-9966-56eda2a3ed6d",
		"name": "Petst",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25633520"
	},
	"item": [
		{
			"name": "Place an order for a pet Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const id = Math.floor(Math.random() * 1000) + 1;\r",
							"pm.environment.set(\"id\", id);\r",
							"console.log(\"Generated id: \", id);\r",
							"\r",
							"const petidNumber = Math.floor(Math.random() * 1000) + 1;\r",
							"pm.environment.set(\"petid\", petidNumber);\r",
							"console.log(\"Generated petid Number: \", petidNumber);\r",
							"\r",
							"const now = new Date();\r",
							"const formattedDateTime = now.toISOString(); // Example: 2025-01-23T10:15:30.000Z\r",
							"pm.environment.set(\"currentDateTime\", formattedDateTime);\r",
							"console.log(\"Generated Date and Time: \", formattedDateTime);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body\r",
							"const response = pm.response.json();\r",
							"// Validate that the \"status\" field is one of the expected values\r",
							"pm.test(\"Status is one of the expected values\", () => {\r",
							"    pm.expect(response.status).to.be.oneOf([\"delivered\", \"Not delivered\", \"In-Progress\"]);\r",
							"});\r",
							"console.log(response)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{id}},\n  \"petId\": {{petid}},\n  \"quantity\": 1,\n  \"shipDate\": \"{{currentDateTime}}\",\n  \"status\": \"delivered\",\n  \"complete\": true\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/store/order",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"store",
						"order"
					]
				}
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
				},
				{
					"name": "Invalid Order",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Find purchase order by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const idgot=pm.environment.get(\"id\")\r",
							"console.log(\"Got id : \", idgot)\r",
							"\r",
							"const petidgot=pm.environment.get(\"petid\")\r",
							"console.log(\"Got pet id : \", petidgot)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/store/order/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"store",
						"order",
						"{{id}}"
					]
				},
				"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
				},
				{
					"name": "Invalid ID supplied",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Order not found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete purchase order by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Code\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/store/order/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"store",
						"order",
						"{{id}}"
					]
				},
				"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
			},
			"response": [
				{
					"name": "Invalid ID supplied",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Order not found",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Type in response\", function () {\r",
							"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
							"});\r",
							"\r",
							"pm.test(\"Code in response\", function () {\r",
							"    pm.expect(jsonData.code).to.eql(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomNumber = Math.floor(Math.random() * 1000) + 1;\r",
							"pm.environment.set(\"dynamicNumber\", randomNumber);\r",
							"console.log(\"Generated Random Number: \", randomNumber);\r",
							"\r",
							"// Function to generate a random string\r",
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"// Generate a random string of length 10\r",
							"const randomString = generateRandomString(10);\r",
							"// Set it as an environment variable\r",
							"pm.environment.set(\"randomString\", randomString);\r",
							"console.log(\"Generated Random String: \", randomString);\r",
							"\r",
							"\r",
							"// Function to generate a random string of given length\r",
							"function generateRandomString(length) {\r",
							"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"// Generate a random email\r",
							"const randomEmail = `${generateRandomString(8)}@example.com`;\r",
							"// Set the generated email as an environment variable\r",
							"pm.environment.set(\"randomEmail\", randomEmail);\r",
							"// Log the generated email for debugging\r",
							"console.log(\"Generated Random Email: \", randomEmail);\r",
							"\r",
							"// Function to generate a random phone number\r",
							"function generateRandomPhoneNumber() {\r",
							"    const countryCode = \"+1\"; // You can change this to any country code, e.g., \"+91\" for India\r",
							"    const areaCode = Math.floor(Math.random() * 900 + 100); // Generate a 3-digit area code (100-999)\r",
							"    const centralOfficeCode = Math.floor(Math.random() * 900 + 100); // Generate a 3-digit central office code (100-999)\r",
							"    const lineNumber = Math.floor(Math.random() * 9000 + 1000); // Generate a 4-digit line number (1000-9999)\r",
							"\r",
							"    return `${countryCode}${areaCode}${centralOfficeCode}${lineNumber}`;\r",
							"}\r",
							"// Generate a random phone number\r",
							"const randomPhoneNumber = generateRandomPhoneNumber();\r",
							"// Set the generated phone number as an environment variable\r",
							"pm.environment.set(\"randomPhoneNumber\", randomPhoneNumber);\r",
							"// Log the generated phone number\r",
							"console.log(\"Generated Random Phone Number: \", randomPhoneNumber);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{dynamicNumber}},\n  \"username\": \"{{randomString}}\",\n  \"firstName\": \"james\",\n  \"lastName\": \"johnson\",\n  \"email\": \"{{randomEmail}}\",\n  \"password\": \"{{randomEmail}}\",\n  \"phone\": \"{{randomPhoneNumber}}\",\n  \"userStatus\": 1\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				},
				"description": "This can only be done by the logged in user."
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get user by user name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response contains dynamic user details\", function () {\r",
							"    let jsonData = pm.response.json(); // Parse the response body as JSON\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"id\"); // Check if 'id' exists\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\"); // Ensure 'id' is a number\r",
							"    pm.expect(jsonData.id).to.be.greaterThan(0); // Ensure 'id' is positive\r",
							"    pm.expect(jsonData).to.have.property(\"username\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"});\r",
							"\r",
							"const vari = pm.environment.get(\"dynamicNumber\")\r",
							"console.log(\"ID got : \", vari)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/{{randomString}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{randomString}}"
					]
				}
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
				},
				{
					"name": "Invalid username supplied",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "User not found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Updated user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const storedNumber = pm.environment.get(\"dynamicNumber\");\r",
							"console.log(\"Retrieved Random Number: \", storedNumber);\r",
							"\r",
							"// Function to generate a random string\r",
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"// Generate a random string of length 10\r",
							"const randomString = generateRandomString(10);\r",
							"// Set it as an environment variable\r",
							"pm.environment.set(\"randomString\", randomString);\r",
							"console.log(\"Generated Random String: \", randomString);\r",
							"\r",
							"\r",
							"// Function to generate a random string\r",
							"function generateNewString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"// Generate a random string of length 10\r",
							"const newString = generateNewString(10);\r",
							"// Set it as an environment variable\r",
							"pm.environment.set(\"newString\", newString);\r",
							"console.log(\"Generated New String: \", newString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{dynamicNumber}}\",\n  \"username\": \"{{randomString}}\",\n  \"firstName\": \"rachel\",\n  \"lastName\": \"johnson\",\n  \"email\": \"rachel@gmail.com\",\n  \"password\": \"Rachel@123\",\n  \"phone\": \"6756745634\",\n  \"userStatus\": 0\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{randomString}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{randomString}}"
					]
				},
				"description": "This can only be done by the logged in user."
			},
			"response": [
				{
					"name": "Invalid user supplied",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "User not found",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const randomString = pm.environment.get(\"randomString\");\r",
							"console.log(\"Generated Random String: \", randomString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/{{randomString}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{randomString}}"
					]
				},
				"description": "This can only be done by the logged in user."
			},
			"response": [
				{
					"name": "Invalid username supplied",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "User not found",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}